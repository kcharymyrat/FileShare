type: edu
files:
  - name: src/fileshare/Application.java
    visible: true
    text: |
      package fileshare;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8888
      server.host=localhost
      
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      
      spring.datasource.url=jdbc:h2:file:../fileshare_db
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.username=sa
      spring.datasource.password=sa
      
      spring.jpa.hibernate.ddl-auto=update
      
      uploads.dir=../uploads
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          runtimeOnly 'com.h2database:h2'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: src/fileshare/MainController.java
    visible: true
    text: |
      package fileshare;
      
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.beans.factory.annotation.Value;
      import org.springframework.http.HttpHeaders;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      import org.springframework.web.multipart.MultipartFile;
      
      import java.io.File;
      import java.io.IOException;
      import java.net.URI;
      import java.net.URISyntaxException;
      import java.net.URLDecoder;
      import java.net.URLEncoder;
      import java.nio.charset.StandardCharsets;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.util.Objects;
      import java.util.Optional;
      import java.util.UUID;
      
      @RestController
      public class MainController {
      
          private final DirectoryService dirService;
          private final FileDetailRepository repository;
      
          @Value("${server.port}")
          private String serverPort;
      
          @Value("${server.host}")
          private String serverHost;
      
          public MainController(@Autowired DirectoryService dirService, @Autowired FileDetailRepository repository) {
              this.dirService = dirService;
              this.repository = repository;
          }
      
          @PostMapping("/api/v1/upload")
          public ResponseEntity<?> uploadFile(
                  @RequestParam("file") MultipartFile file
          ) {
              // get the uploads File
              File uploadsDir = dirService.createUploadsDirectory();
      
              try {
                  FileDetailEntity fileDetailEntity = new FileDetailEntity();
                  fileDetailEntity.setReceivedName(file.getOriginalFilename());
                  repository.save(fileDetailEntity);
                  String idStr = String.format("%d", fileDetailEntity.getId());
                  System.out.printf("id = %s\n", idStr);
                  String newFileName = idStr + "-" + file.getOriginalFilename();
      
                  Path path = Path.of(uploadsDir.getPath(), newFileName);
      
                  file.transferTo(path);
                  String encodedFileName = URLEncoder.encode(Objects.requireNonNull(newFileName), StandardCharsets.UTF_8);
      
                  // Save it in DB
                  fileDetailEntity.setFilename(file.getOriginalFilename());
                  fileDetailEntity.setEncodedFilename(encodedFileName);
                  repository.save(fileDetailEntity);
                  System.out.printf("id = %s\n", fileDetailEntity.getId());
      
      
                  String fileUrl = String.format("http://%s:%s/api/v1/download/%d", serverHost, serverPort, fileDetailEntity.getId());
                  HttpHeaders headers = new HttpHeaders();
                  headers.setLocation(new URI(fileUrl));
                  headers.setContentType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));
      //            headers.setContentType(MediaType.parseMediaType(Files.probeContentType(path)));
      
                  System.out.printf("\n\n\nfileName = %s\n", file.getOriginalFilename());
                  System.out.printf("fileUrl = %s\n", fileUrl);
                  System.out.printf("fileDetailEntity = %s\n\n\n", fileDetailEntity);
      
                  return new ResponseEntity<>(headers, HttpStatus.CREATED);
              } catch (IOException | URISyntaxException e) {
                  throw new RuntimeException(e);
              }
      
          }
      
      
          @GetMapping("/api/v1/info")
          @ResponseStatus(HttpStatus.OK)
          public ResponseEntity<?> getFileInfo() {
              File uploadsDir = dirService.createUploadsDirectory();
              File[] subFiles = uploadsDir.listFiles();
      
              if (subFiles != null) {
                  int totalFiles = subFiles.length;
                  long totalBytes = 0;
                  for (File subFile : subFiles) {
                      totalBytes += subFile.length();
                  }
      
                  return ResponseEntity.ok(new FileInfoDTO(totalFiles, totalBytes));
      
              }
      
              return ResponseEntity.ok().build();
          }
      
      
          @GetMapping("api/v1/download/{strId}")
          public ResponseEntity<?> download(
                  @PathVariable String strId
          ) {
              long id;
              try {
                  id = Long.parseLong(strId);
                  // Do something with the number
              } catch (NumberFormatException e) {
                  // Handle the case where the string is not a valid long
                  return ResponseEntity.notFound().build();
              }
      
              Optional<FileDetailEntity> fileDetailEntityOptional = repository.findById(id);
              if (fileDetailEntityOptional.isEmpty()) {
                  return ResponseEntity.notFound().build();
              }
      
              FileDetailEntity fileDetailEntity = fileDetailEntityOptional.get();
              System.out.printf("in download: fileDetailEntity = %s\n\n\n", fileDetailEntity);
              String encodedFilename = fileDetailEntity.getEncodedFilename();
      
              // Decode filename
              String decodedFilename = URLDecoder.decode(encodedFilename, StandardCharsets.UTF_8);
      
              // Get file and it's path
              File uploadsDir = dirService.createUploadsDirectory();
              Path path = Path.of(uploadsDir.getPath(), decodedFilename);
      
              if (uploadsDir.exists()) {
                  // Read the file content into a byte array
                  try {
                      System.out.printf("in download: uploadsDir = %s\n\n\n", uploadsDir);
                      byte[] fileContent = Files.readAllBytes(path);
      
                      // Set Content-Disposition header
                      String contentDispositionValue = String.format("attachment; filename=\"%s\"", fileDetailEntity.getReceivedName());
      
                      System.out.printf("Files.probeContentType(path) = %s\n", Files.probeContentType(path));
                      // Set the response headers
                      HttpHeaders headers = new HttpHeaders();
                      headers.set(HttpHeaders.CONTENT_DISPOSITION, contentDispositionValue);
                      headers.setContentType(MediaType.parseMediaType(Files.probeContentType(path)));
      
                      // Return the file content with status code 200 OK
                      return new ResponseEntity<>(fileContent, headers, HttpStatus.OK);
                  } catch (Exception e) {
                      return ResponseEntity.notFound().build();
                  }
              } else {
                  // Return status code 404 NOT FOUND if the file does not exist
                  return ResponseEntity.notFound().build();
              }
      
      //        // Create a Resource from the path
      //        Resource resource = new PathResource(path);
      //
      //        // Check if the resource exists and is readable
      //        if (!resource.exists() || !resource.isReadable()) {
      //            return ResponseEntity.notFound().build();
      //        }
      //
      //        // Creating the Streaming Response
      //        StreamingResponseBody responseBody = outputStream -> {
      //            try (InputStream inputStream = resource.getInputStream()) {
      //                byte[] buffer = new byte[4096];
      //                int bytesRead;
      //                while ((bytesRead = inputStream.read(buffer)) != -1) {
      //                    outputStream.write(buffer, 0, bytesRead);
      //                }
      //            } catch (IOException e) {
      //                throw new RuntimeException(e);
      //            }
      //        };
      //
      //        // Setting the response header
      //        HttpHeaders headers = new HttpHeaders();
      //        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
      //        headers.setContentDispositionFormData("attachment", resource.getFilename());
      //
      //        // Assembling response
      //        return ResponseEntity
      //                .ok()
      //                .headers(headers)
      //                .body(responseBody);
          }
      
      }
    learner_created: false
  - name: src/fileshare/FileDetailEntity.java
    visible: true
    text: |
      package fileshare;
      
      import jakarta.persistence.*;
      
      @Entity
      @Table(name="file_details")
      public class FileDetailEntity {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
      
          @Column(name = "received_name")
          private String receivedName;
      
          @Column(name = "file_name")
          private String filename;
      
          @Column(name = "encoded_filename")
          private String encodedFilename;
      
          public FileDetailEntity() {
          }
      
          public FileDetailEntity(String fileName, String encodedFilename) {
              this.filename = fileName;
              this.encodedFilename = encodedFilename;
          }
      
          public Long getId() {
              return id;
          }
      
          public String getFilename() {
              return filename;
          }
      
          public void setFilename(String filename) {
              this.filename = filename;
          }
      
          public String getEncodedFilename() {
              return encodedFilename;
          }
      
          public void setEncodedFilename(String encodedFilename) {
              this.encodedFilename = encodedFilename;
          }
      
          public String getReceivedName() {
              return receivedName;
          }
      
          public void setReceivedName(String receivedName) {
              this.receivedName = receivedName;
          }
      }
    learner_created: false
  - name: src/fileshare/FileDetailRepository.java
    visible: true
    text: |
      package fileshare;
      
      import org.springframework.data.repository.CrudRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.Optional;
      import java.util.UUID;
      
      @Repository
      public interface FileDetailRepository extends CrudRepository<FileDetailEntity, Long> {
          Optional<FileDetailEntity> findById(Long id);
      }
    learner_created: false
  - name: src/fileshare/DirectoryService.java
    visible: true
    text: |
      package fileshare;
      
      import org.springframework.beans.factory.annotation.Value;
      import org.springframework.stereotype.Component;
      import org.springframework.stereotype.Service;
      
      import java.io.File;
      
      @Service
      public class DirectoryService {
      
          @Value("${uploads.dir}")
          private String uploadsDirectoryPath;
      
      
          public File createUploadsDirectory(){
              // create a directory
              File uploadsDir = new File(getUploadsDirectoryPath());
      
              if (!uploadsDir.exists()) {
                  boolean created = uploadsDir.mkdirs();
                  if (created) {
                      System.out.println("Uploads directory created successfully at: " + uploadsDir.getAbsolutePath());
                  } else {
                      System.err.println("Failed to create uploads directory at: " + uploadsDir.getAbsolutePath());
                  }
              } else {
                  System.out.println("Uploads directory already exists at: " + uploadsDir.getAbsolutePath());
              }
      
              System.out.printf("uploadsDir = %s\n", uploadsDir);
              return uploadsDir;
          }
      
      
          public String getUploadsDirectoryPath() {
              return uploadsDirectoryPath;
          }
      }
    learner_created: false
  - name: src/fileshare/FileInfoDTO.java
    visible: true
    text: |+
      package fileshare;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      
      public record FileInfoDTO(
          @JsonProperty("total_files") int totalFiles,
          @JsonProperty("total_bytes") long totalBytes
      ){}
    
    learner_created: false
  - name: test/files/bigfile.png
    visible: false
    is_binary: true
    learner_created: false
  - name: test/files/file 1.jpg
    visible: false
    is_binary: true
    learner_created: false
  - name: test/files/file2.jpg
    visible: false
    is_binary: true
    learner_created: false
  - name: test/files/file3.txt
    visible: false
    text: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis rerum\
    \ corporis dolorem ad libero placeat, itaque, et ullam quaerat facere voluptatem\
    \ laborum tenetur ducimus. Culpa eum adipisci suscipit, explicabo esse atque neque\
    \ cum aliquam dolorem ducimus nisi autem expedita pariatur vitae, mollitia aperiam\
    \ blanditiis cupiditate exercitationem fugit officia amet maiores."
    learner_created: false
  - name: test/files/file4.png
    visible: false
    is_binary: true
    learner_created: false
  - name: test/files/file5.jpg
    visible: false
    is_binary: true
    learner_created: false
  - name: test/files/file6.jpg
    visible: false
    is_binary: true
    learner_created: false
  - name: test/FileClient.java
    visible: false
    text: |
      import java.io.IOException;
      import java.net.URI;
      import java.net.http.HttpClient;
      import java.net.http.HttpRequest;
      import java.net.http.HttpResponse;
      import java.nio.charset.StandardCharsets;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.UUID;
      
      /**
       * Utility class for sending multipart/form-data requests
       */
      class FileClient {
          private final HttpClient client;
      
          public FileClient() {
              this.client = HttpClient.newHttpClient();
          }
      
          /**
           * Sends POST multipart/form-data request with the file to the server's address
           *
           * @param address  server's address
           * @param fileData container with file name, file contents and mime type
           * @return HttpResponse from the server
           * @throws IOException          when a general IO error occurs
           * @throws InterruptedException when the thread is interrupted
           */
          public HttpResponse<byte[]> post(String address, FileData fileData) throws IOException, InterruptedException {
              String boundary = UUID.randomUUID().toString();
              HttpRequest request = HttpRequest.newBuilder()
                      .uri(URI.create(address))
                      .headers("Content-Type", "multipart/form-data; boundary=" + boundary)
                      .POST(ofMultipartData(fileData, boundary))
                      .build();
      
              return client.send(request, HttpResponse.BodyHandlers.ofByteArray());
          }
      
          /**
           * Sends GET request to fetch a file by the specified URI
           *
           * @param address the file URI
           * @return HttpResponse
           * @throws IOException          when a general IO error occurs
           * @throws InterruptedException when the thread is interrupted
           */
          public HttpResponse<byte[]> get(String address) throws IOException, InterruptedException {
              HttpRequest request = HttpRequest.newBuilder()
                      .uri(URI.create(address))
                      .GET()
                      .build();
      
              return client.send(request, HttpResponse.BodyHandlers.ofByteArray());
          }
      
          /**
           * Utility method to create a BodyPublisher for multipart/form-data media type
           *
           * @param fileData container with file name, file contents and mime type
           * @param boundary request parts separator
           * @return BodyPublisher
           */
          private HttpRequest.BodyPublisher ofMultipartData(FileData fileData, String boundary) {
              List<byte[]> byteArrays = new ArrayList<>();
      
              byteArrays.add("--%s\r\nContent-Disposition: form-data; name="
                      .formatted(boundary).getBytes(StandardCharsets.UTF_8));
              byteArrays.add(("\"file\"; filename=\"%s\"\r\nContent-Type: %s\r\n\r\n")
                      .formatted(fileData.getOriginalName(), fileData.getMimeType()).getBytes(StandardCharsets.UTF_8));
              byteArrays.add(fileData.getContents());
              byteArrays.add("\r\n".getBytes(StandardCharsets.UTF_8));
              byteArrays.add("--%s--".formatted(boundary).getBytes(StandardCharsets.UTF_8));
      
              return HttpRequest.BodyPublishers.ofByteArrays(byteArrays);
          }
      }
    learner_created: false
  - name: test/FileData.java
    visible: false
    text: |
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Path;
      
      class FileData {
          private String originalName;
          private byte[] contents;
          private String mimeType;
      
          private FileData() { }
      
          public static FileData of(String pathString) throws IOException {
              Path path = Path.of(pathString);
              String mime = Files.probeContentType(path);
              byte[] bytes = Files.readAllBytes(path);
              return new FileData()
                      .setOriginalName(path.getFileName().toString())
                      .setContents(bytes)
                      .setMimeType(mime == null ? "application/octet-stream" : mime);
          }
      
          public String getOriginalName() {
              return originalName;
          }
      
          public FileData setOriginalName(String originalName) {
              this.originalName = originalName;
              return this;
          }
      
          public byte[] getContents() {
              return contents;
          }
      
          private FileData setContents(byte[] contents) {
              this.contents = contents;
              return this;
          }
      
          public String getMimeType() {
              return mimeType;
          }
      
          public FileData setMimeType(String mimeType) {
              this.mimeType = mimeType;
              return this;
          }
      }
    learner_created: false
  - name: test/FileShareTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.io.IOException;
      import java.net.http.HttpResponse;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.util.Arrays;
      import java.util.Comparator;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class FileShareTest extends SpringTest {
          private final String uploadUrl = "http://localhost:" + this.port + "/api/v1/upload";
          private final String downloadUrl = "http://localhost:" + this.port + "/api/v1/download";
          private final String infoUrl = "/api/v1/info";
          private final Path storagePath = Path.of("../uploads");
      
          public FileShareTest() {
              super(8888, "../fileshare_db.mv.db");
          }
      
          CheckResult emptyStorageAndCheckInfo() {
              clearStorage();
      
              var response = get(infoUrl).send();
      
              checkStatusCode(
                      response.getRequest().getMethod(),
                      response.getRequest().getEndpoint(),
                      response.getStatusCode(),
                      200
              );
      
              checkJson(response, 0, 0);
      
              return CheckResult.correct();
          }
      
          CheckResult testInfo(int count, int size) {
              var response = get(infoUrl).send();
      
              checkStatusCode(
                      response.getRequest().getMethod(),
                      response.getRequest().getEndpoint(),
                      response.getStatusCode(),
                      200
              );
      
              checkJson(response, count, size);
      
              return CheckResult.correct();
          }
      
          CheckResult testNotFound() {
              try {
                  FileClient client = new FileClient();
                  var location = downloadUrl + "/" + UUID.randomUUID();
                  HttpResponse<byte[]> response = client.get(location);
                  checkStatusCode(
                          response.request().method(),
                          response.request().uri().toString(),
                          response.statusCode(),
                          404
                  );
                  return CheckResult.correct();
              } catch (IOException | InterruptedException e) {
                  return CheckResult.wrong("Error occurred during the test execution: " + e.getMessage());
              }
          }
      
          CheckResult testPostAndGetFile(String filepath, String filename) {
              try {
                  FileClient client = new FileClient();
      
                  FileData fileData = FileData.of(filepath).setOriginalName(filename);
      
                  HttpResponse<byte[]> postResponse = client.post(uploadUrl, fileData);
      
                  checkStatusCode(
                          postResponse.request().method(),
                          postResponse.request().uri().toString(),
                          postResponse.statusCode(),
                          201
                  );
      
                  String location = postResponse.headers()
                          .firstValue("Location")
                          .orElseThrow(() -> new WrongAnswer("Response should contain the 'Location' header."));
      
                  if (location.isBlank()) {
                      return CheckResult.wrong("The value of the 'Location' header should not be blank");
                  }
      
                  HttpResponse<byte[]> getResponse = client.get(location);
      
                  String contentType = getResponse.headers()
                          .firstValue("Content-Type")
                          .orElseThrow(() -> new WrongAnswer("Response should contain the 'Content-Type' header."));
      
                  if (!contentType.matches(fileData.getMimeType())) {
                      return CheckResult.wrong(
                              "Expected Content-Type: %s but was %s"
                                      .formatted(fileData.getMimeType(), contentType)
                      );
                  }
      
                  String contentDisposition = getResponse.headers()
                          .firstValue("Content-Disposition")
                          .orElseThrow(() -> new WrongAnswer("Response should contain the 'Content-Disposition' header."));
      
                  if (!contentDisposition.matches("attachment; filename=\"?%s\"?".formatted(fileData.getOriginalName()))) {
                      return CheckResult.wrong(
                              "Expected Content-Disposition: attachment; filename=%s but was %s"
                                      .formatted(fileData.getOriginalName(), contentDisposition)
                      );
                  }
      
                  if (!Arrays.equals(fileData.getContents(), getResponse.body())) {
                      return CheckResult.wrong("""
                              GET %s
                              returned a request body that does not match the expected file content
                              """.formatted(location));
                  }
      
                  return CheckResult.correct();
              } catch (IOException | InterruptedException e) {
                  return CheckResult.wrong("Error occurred during the test execution: " + e.getMessage());
              }
          }
      
          CheckResult testPayloadTooLarge(String filepath, String filename) {
              try {
                  FileClient client = new FileClient();
      
                  FileData fileData = FileData.of(filepath).setOriginalName(filename);
      
                  HttpResponse<byte[]> postResponse = client.post(uploadUrl, fileData);
      
                  checkStatusCode(
                          postResponse.request().method(),
                          postResponse.request().uri().toString(),
                          postResponse.statusCode(),
                          413
                  );
      
                  return CheckResult.correct();
              } catch (IOException | InterruptedException e) {
                  return CheckResult.wrong("Error occurred during the test execution: " + e.getMessage());
              }
          }
      
          CheckResult testUnsupportedMediaType(String filepath, String filename, String mediaType) {
              try {
                  FileClient client = new FileClient();
      
                  FileData fileData = FileData.of(filepath).setOriginalName(filename).setMimeType(mediaType);
      
                  HttpResponse<byte[]> postResponse = client.post(uploadUrl, fileData);
      
                  checkStatusCode(
                          postResponse.request().method(),
                          postResponse.request().uri().toString(),
                          postResponse.statusCode(),
                          415
                  );
      
                  return CheckResult.correct();
              } catch (IOException | InterruptedException e) {
                  return CheckResult.wrong("Error occurred during the test execution: " + e.getMessage());
              }
          }
      
          @DynamicTest
          DynamicTesting[] dt = {
                  this::emptyStorageAndCheckInfo,
                  () -> testPayloadTooLarge("./test/files/bigfile.png", "file1.png"),
                  () -> testUnsupportedMediaType("./test/files/file2.jpg", "file.exe", "application/octet-stream"),
                  () -> testUnsupportedMediaType("./test/files/file2.jpg", "file.jpg", "text/plain"),
                  () -> testUnsupportedMediaType("./test/files/file2.jpg", "file.jpg", "image/png"),
                  () -> testPostAndGetFile("./test/files/file 1.jpg", "file1.jpg"),
                  () -> testPostAndGetFile("./test/files/file 1.jpg", "file1.jpg"),
                  () -> testPostAndGetFile("./test/files/file 1.jpg", "file1.jpg"),
                  () -> testInfo(1, 44856),
                  () -> testPostAndGetFile("./test/files/file2.jpg", "file1.jpg"),
                  () -> testPostAndGetFile("./test/files/file3.txt", "file.txt"),
                  () -> testPostAndGetFile("./test/files/file4.png", "file.png"),
                  () -> testPostAndGetFile("./test/files/file5.jpg", "file33.jpg"),
                  () -> testInfo(5, 161541),
                  () -> testPostAndGetFile("./test/files/file4.png", "file44.png"),
                  () -> testPostAndGetFile("./test/files/file5.jpg", "file55.jpg"),
                  this::testNotFound,
                  this::reloadServer,
                  () -> testInfo(5, 161541),
                  () -> testPayloadTooLarge("./test/files/file6.jpg", "file.jpg"),
                  () -> testInfo(5, 161541),
          };
      
          private void checkStatusCode(String method, String endpoint, int actual, int expected) {
              if (actual != expected) {
                  throw new WrongAnswer("""
                          %s %s should respond with status code %d, responded with %d
                          \r
                          """.formatted(method, endpoint, expected, actual));
              }
          }
      
          private void checkJson(org.hyperskill.hstest.mocks.web.response.HttpResponse response,
                                 int expectedCount,
                                 int expectedSize) {
              try {
                  response.getJson();
              } catch (Exception e) {
                  throw new WrongAnswer("GET %s should return a valid JSON".formatted(infoUrl));
              }
      
              expect(response.getContent()).asJson().check(isObject()
                      .value("total_files", expectedCount)
                      .value("total_bytes", expectedSize)
              );
          }
      
          private void clearStorage() {
              try (var stream = Files.walk(storagePath)) {
                  stream.sorted(Comparator.reverseOrder())
                          .filter(path -> !path.equals(storagePath))
                          .forEach(path -> {
                              try {
                                  Files.delete(path);
                              } catch (IOException e) {
                                  throw new WrongAnswer("Error clearing the file storage folder: " + e.getMessage());
                              }
                          });
              } catch (Exception ex) {
                  throw new WrongAnswer("Error clearing the file storage folder: " + ex.getMessage());
              }
          }
      
          private CheckResult reloadServer() {
              try {
                  reloadSpring();
              } catch (Exception ex) {
                  return CheckResult.wrong("Error reloading the application: " + ex.getMessage());
              }
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: 1-file1.jpg
    visible: true
    is_binary: true
    learner_created: true
  - name: 6-file.png
    visible: true
    is_binary: true
    learner_created: true
  - name: 5-file.txt
    visible: true
    learner_created: true
  - name: 7-file33.jpg
    visible: true
    is_binary: true
    learner_created: true
  - name: 10-file.jpg
    visible: true
    is_binary: true
    learner_created: true
  - name: 4-file1.jpg
    visible: true
    is_binary: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/397/stages/2349/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 22 Feb 2024 07:37:48 UTC"
record: 5
